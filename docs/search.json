[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cosas de graficos",
    "section": "",
    "text": "Repositorio para no olvidarme de cosas de graficos en general.\n\n\n\n\n\nEn todas sus variantes",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "Mis graficos",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "index.html#running-code",
    "href": "index.html#running-code",
    "title": "Mis graficos",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "Donut/readme.html",
    "href": "Donut/readme.html",
    "title": "Donut Chart",
    "section": "",
    "text": "Lo primero será crear un data.table con datos simulados. En este caso son 2 categorías.\n\nSexo que irá en la torta\nGrupo que irá en facets\nN que son recuentos\n\nlibrary(data.table)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Partimos con data numerica de cantidades\ngdata &lt;- data.table(\n    SEXO = rep(c(\"Hombre\", \"Mujer\"), 4),\n    GRUPO = rep(c(\"D\", \"C\", \"B\", \"A\"), each = 2),\n    N = c(2220698, 1713396, 1381339, 1274634, 2841801, 3748242, 1292953, 1743318)\n)\n\nprint(gdata, row.names = FALSE)\n##    SEXO  GRUPO       N\n##  &lt;char&gt; &lt;char&gt;   &lt;num&gt;\n##  Hombre      D 2220698\n##   Mujer      D 1713396\n##  Hombre      C 1381339\n##   Mujer      C 1274634\n##  Hombre      B 2841801\n##   Mujer      B 3748242\n##  Hombre      A 1292953\n##   Mujer      A 1743318\n\n\n\nAhora necesitamos crear los minimos y máximos de los porcentajes de N respecto de cada GRUPO. La razón es que este gráfico se crea usando rectangulos de un tamaño definido por los porcentajes. Hacemos un pequeño data management.\n# Calculamos el porcentaje\ngdata[, PCT := N/sum(N), GRUPO]\n\n# El valor maximo de cada geom_rect\ngdata[, YMAX := cumsum(PCT), GRUPO]\n\n# El valor mínimo\ngdata[, YMIN := shift(YMAX, type = 'lag')]\ngdata[, YMIN := ifelse(YMAX != 1, 0, YMIN)]\n\n# Indice entre Mujer/Hombre\ngdata[, FEM := round(PCT/YMIN, 2)]\ngdata[, FEM := ifelse(FEM == Inf, NA, FEM)]\n\nprint(as.data.frame(gdata), row.names = FALSE)\n##    SEXO GRUPO       N       PCT      YMAX      YMIN  FEM\n##  Hombre     D 2220698 0.5644751 0.5644751 0.0000000   NA\n##   Mujer     D 1713396 0.4355249 1.0000000 0.5644751 0.77\n##  Hombre     C 1381339 0.5200877 0.5200877 0.0000000   NA\n##   Mujer     C 1274634 0.4799123 1.0000000 0.5200877 0.92\n##  Hombre     B 2841801 0.4312265 0.4312265 0.0000000   NA\n##   Mujer     B 3748242 0.5687735 1.0000000 0.4312265 1.32\n##  Hombre     A 1292953 0.4258358 0.4258358 0.0000000   NA\n##   Mujer     A 1743318 0.5741642 1.0000000 0.4258358 1.35\n\n\n\nYa con esto el grafico, pero primero el theme que suelo usar. Producto del mismo tuve que pasar muchos elementos a element_blank() .\n# Mi tema\nolito_theme &lt;- function(){\n    theme_bw() %+replace%  \n        theme(\n            axis.title.y = element_text(margin = margin(r = 6), \n                                        size = 14, hjust = 0, color = \"gray30\",\n                                        angle = 90),\n            axis.title.x = element_text(margin = margin(t = 8), \n                                        size = 14, hjust = 0, color = \"gray30\"),\n            axis.text.x.top = element_blank(),\n            axis.text.y.right = element_blank(),\n            axis.text.x = element_text(size = 12, color = \"gray30\"), \n            axis.text.y = element_text(size = 12, color = \"gray30\", hjust = 1),\n            axis.line = element_line(color =\"gray30\", linewidth = 0.5),\n            axis.ticks.length.x.top = unit(0, \"cm\"),\n            axis.ticks.length.y.right = unit(0, \"cm\"),\n            axis.ticks.length.y = unit(.15, \"cm\"),\n            axis.ticks.length.x = unit(.15, \"cm\"),\n            panel.grid.major.x = element_line(color = \"gray85\"),\n            panel.grid.major.y = element_line(color = \"gray85\"),\n            panel.grid.minor.y = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.background = element_rect(color = \"white\", fill = 'grey98', linewidth = 0.1),\n            legend.position = \"top\", \n            legend.margin = margin(b = 0),\n            legend.justification = \"right\",\n            legend.title = element_text(size = 14, color = \"gray30\"),\n            legend.text = element_text(size = 13, color = \"gray30\"),\n            strip.text.x = element_text(size = 12),\n            strip.text.y = element_text(size = 12, angle = 270)\n        )\n}\n\n\n\ng &lt;- ggplot(gdata, aes(ymax=YMAX, ymin=YMIN, xmax=4, xmin=3, fill=SEXO)) +\n    geom_rect(color = 'grey30') +\n    facet_grid(cols = vars(forcats::fct_rev(GRUPO))) +\n    scale_fill_manual(values = c(\"steelblue\",\"hotpink2\"))  +\n    coord_polar(theta = \"y\") + xlim(c(1, 4)) +\n    olito_theme() +\n    geom_text(aes(x = 3.5, y = (YMIN + YMAX) / 2, \n                  label = scales::percent(PCT, accuracy = 1)), \n              color = \"white\", size = 5, fontface = 'bold' ,\n              show.legend = FALSE) +\n    theme(axis.text.x = element_blank(), axis.text.y = element_blank(),\n          axis.ticks = element_blank(), panel.grid.major.x = element_blank(), \n          panel.grid.major.y = element_blank(), panel.border = element_blank(),\n          strip.background = element_blank(), panel.background = element_blank(),\n          axis.line = element_blank(), axis.title.x = element_blank(),\n          axis.title.y = element_blank(), strip.text.x = element_blank() ) +\n    labs(fill = \"Sexo\") +\n    geom_text(x = 0.5, y = 0.5, label = gdata$GRUPO, \n             color = \"grey30\", size = 12, fontface = \"bold\") +\n    geom_text(x = 1.5, y = 0.5, label = gdata$FEM, \n              color = \"grey30\", size = 8, fontface = \"bold\")\n\nggsave(\"donut.png\", plot = g, width = 1500, height = 400, \n       units = \"px\", dpi = 120, scale = 120/96)\nY Voila!"
  },
  {
    "objectID": "Donut/readme.html#datos",
    "href": "Donut/readme.html#datos",
    "title": "Donut Chart",
    "section": "",
    "text": "Lo primero será crear un data.table con datos simulados. En este caso son 2 categorías.\n\nSexo que irá en la torta\nGrupo que irá en facets\nN que son recuentos\n\nlibrary(data.table)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Partimos con data numerica de cantidades\ngdata &lt;- data.table(\n    SEXO = rep(c(\"Hombre\", \"Mujer\"), 4),\n    GRUPO = rep(c(\"D\", \"C\", \"B\", \"A\"), each = 2),\n    N = c(2220698, 1713396, 1381339, 1274634, 2841801, 3748242, 1292953, 1743318)\n)\n\nprint(gdata, row.names = FALSE)\n##    SEXO  GRUPO       N\n##  &lt;char&gt; &lt;char&gt;   &lt;num&gt;\n##  Hombre      D 2220698\n##   Mujer      D 1713396\n##  Hombre      C 1381339\n##   Mujer      C 1274634\n##  Hombre      B 2841801\n##   Mujer      B 3748242\n##  Hombre      A 1292953\n##   Mujer      A 1743318"
  },
  {
    "objectID": "Donut/readme.html#data-management",
    "href": "Donut/readme.html#data-management",
    "title": "Donut Chart",
    "section": "",
    "text": "Ahora necesitamos crear los minimos y máximos de los porcentajes de N respecto de cada GRUPO. La razón es que este gráfico se crea usando rectangulos de un tamaño definido por los porcentajes. Hacemos un pequeño data management.\n# Calculamos el porcentaje\ngdata[, PCT := N/sum(N), GRUPO]\n\n# El valor maximo de cada geom_rect\ngdata[, YMAX := cumsum(PCT), GRUPO]\n\n# El valor mínimo\ngdata[, YMIN := shift(YMAX, type = 'lag')]\ngdata[, YMIN := ifelse(YMAX != 1, 0, YMIN)]\n\n# Indice entre Mujer/Hombre\ngdata[, FEM := round(PCT/YMIN, 2)]\ngdata[, FEM := ifelse(FEM == Inf, NA, FEM)]\n\nprint(as.data.frame(gdata), row.names = FALSE)\n##    SEXO GRUPO       N       PCT      YMAX      YMIN  FEM\n##  Hombre     D 2220698 0.5644751 0.5644751 0.0000000   NA\n##   Mujer     D 1713396 0.4355249 1.0000000 0.5644751 0.77\n##  Hombre     C 1381339 0.5200877 0.5200877 0.0000000   NA\n##   Mujer     C 1274634 0.4799123 1.0000000 0.5200877 0.92\n##  Hombre     B 2841801 0.4312265 0.4312265 0.0000000   NA\n##   Mujer     B 3748242 0.5687735 1.0000000 0.4312265 1.32\n##  Hombre     A 1292953 0.4258358 0.4258358 0.0000000   NA\n##   Mujer     A 1743318 0.5741642 1.0000000 0.4258358 1.35"
  },
  {
    "objectID": "Donut/readme.html#theme",
    "href": "Donut/readme.html#theme",
    "title": "Donut Chart",
    "section": "",
    "text": "Ya con esto el grafico, pero primero el theme que suelo usar. Producto del mismo tuve que pasar muchos elementos a element_blank() .\n# Mi tema\nolito_theme &lt;- function(){\n    theme_bw() %+replace%  \n        theme(\n            axis.title.y = element_text(margin = margin(r = 6), \n                                        size = 14, hjust = 0, color = \"gray30\",\n                                        angle = 90),\n            axis.title.x = element_text(margin = margin(t = 8), \n                                        size = 14, hjust = 0, color = \"gray30\"),\n            axis.text.x.top = element_blank(),\n            axis.text.y.right = element_blank(),\n            axis.text.x = element_text(size = 12, color = \"gray30\"), \n            axis.text.y = element_text(size = 12, color = \"gray30\", hjust = 1),\n            axis.line = element_line(color =\"gray30\", linewidth = 0.5),\n            axis.ticks.length.x.top = unit(0, \"cm\"),\n            axis.ticks.length.y.right = unit(0, \"cm\"),\n            axis.ticks.length.y = unit(.15, \"cm\"),\n            axis.ticks.length.x = unit(.15, \"cm\"),\n            panel.grid.major.x = element_line(color = \"gray85\"),\n            panel.grid.major.y = element_line(color = \"gray85\"),\n            panel.grid.minor.y = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.background = element_rect(color = \"white\", fill = 'grey98', linewidth = 0.1),\n            legend.position = \"top\", \n            legend.margin = margin(b = 0),\n            legend.justification = \"right\",\n            legend.title = element_text(size = 14, color = \"gray30\"),\n            legend.text = element_text(size = 13, color = \"gray30\"),\n            strip.text.x = element_text(size = 12),\n            strip.text.y = element_text(size = 12, angle = 270)\n        )\n}"
  },
  {
    "objectID": "Donut/readme.html#grafico",
    "href": "Donut/readme.html#grafico",
    "title": "Donut Chart",
    "section": "",
    "text": "g &lt;- ggplot(gdata, aes(ymax=YMAX, ymin=YMIN, xmax=4, xmin=3, fill=SEXO)) +\n    geom_rect(color = 'grey30') +\n    facet_grid(cols = vars(forcats::fct_rev(GRUPO))) +\n    scale_fill_manual(values = c(\"steelblue\",\"hotpink2\"))  +\n    coord_polar(theta = \"y\") + xlim(c(1, 4)) +\n    olito_theme() +\n    geom_text(aes(x = 3.5, y = (YMIN + YMAX) / 2, \n                  label = scales::percent(PCT, accuracy = 1)), \n              color = \"white\", size = 5, fontface = 'bold' ,\n              show.legend = FALSE) +\n    theme(axis.text.x = element_blank(), axis.text.y = element_blank(),\n          axis.ticks = element_blank(), panel.grid.major.x = element_blank(), \n          panel.grid.major.y = element_blank(), panel.border = element_blank(),\n          strip.background = element_blank(), panel.background = element_blank(),\n          axis.line = element_blank(), axis.title.x = element_blank(),\n          axis.title.y = element_blank(), strip.text.x = element_blank() ) +\n    labs(fill = \"Sexo\") +\n    geom_text(x = 0.5, y = 0.5, label = gdata$GRUPO, \n             color = \"grey30\", size = 12, fontface = \"bold\") +\n    geom_text(x = 1.5, y = 0.5, label = gdata$FEM, \n              color = \"grey30\", size = 8, fontface = \"bold\")\n\nggsave(\"donut.png\", plot = g, width = 1500, height = 400, \n       units = \"px\", dpi = 120, scale = 120/96)\nY Voila!"
  },
  {
    "objectID": "Donut/donut.plot.html",
    "href": "Donut/donut.plot.html",
    "title": "Donut Chart",
    "section": "",
    "text": "Lo primero será crear un data.table con datos simulados. En este caso son 2 categorías.\n\nSexo que irá en la torta\nGrupo que irá en facets\nN que son recuentos\n\n\nlibrary(data.table)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Partimos con data numerica de cantidades\ngdata &lt;- data.table(\n    SEXO = rep(c(\"Hombre\", \"Mujer\"), 4),\n    GRUPO = rep(c(\"D\", \"C\", \"B\", \"A\"), each = 2),\n    N = c(2220698, 1713396, 1381339, 1274634, 2841801, 3748242, 1292953, 1743318)\n)\n\nprint(gdata, row.names = FALSE)\n\n   SEXO  GRUPO       N\n &lt;char&gt; &lt;char&gt;   &lt;num&gt;\n Hombre      D 2220698\n  Mujer      D 1713396\n Hombre      C 1381339\n  Mujer      C 1274634\n Hombre      B 2841801\n  Mujer      B 3748242\n Hombre      A 1292953\n  Mujer      A 1743318\n\n\n\n\n\nAhora necesitamos crear los minimos y máximos de los porcentajes de N respecto de cada GRUPO. La razón es que este gráfico se crea usando rectangulos de un tamaño definido por los porcentajes. Hacemos un pequeño data management.\n\n# Calculamos el porcentaje\ngdata[, PCT := N/sum(N), GRUPO]\n\n# El valor maximo de cada geom_rect\ngdata[, YMAX := cumsum(PCT), GRUPO]\n\n# El valor mínimo\ngdata[, YMIN := shift(YMAX, type = 'lag')]\ngdata[, YMIN := ifelse(YMAX != 1, 0, YMIN)]\n\n# Indice entre Mujer/Hombre\ngdata[, FEM := round(PCT/YMIN, 2)]\ngdata[, FEM := ifelse(FEM == Inf, NA, FEM)]\n\nprint(as.data.frame(gdata), row.names = FALSE)\n\n   SEXO GRUPO       N       PCT      YMAX      YMIN  FEM\n Hombre     D 2220698 0.5644751 0.5644751 0.0000000   NA\n  Mujer     D 1713396 0.4355249 1.0000000 0.5644751 0.77\n Hombre     C 1381339 0.5200877 0.5200877 0.0000000   NA\n  Mujer     C 1274634 0.4799123 1.0000000 0.5200877 0.92\n Hombre     B 2841801 0.4312265 0.4312265 0.0000000   NA\n  Mujer     B 3748242 0.5687735 1.0000000 0.4312265 1.32\n Hombre     A 1292953 0.4258358 0.4258358 0.0000000   NA\n  Mujer     A 1743318 0.5741642 1.0000000 0.4258358 1.35\n\n\n\n\n\nYa con esto el grafico, pero primero el theme que suelo usar. Producto del mismo tuve que pasar muchos elementos a element_blank() .\n\n# Mi tema\nolito_theme &lt;- function(){\n    theme_bw() %+replace%  \n        theme(\n            axis.title.y = element_text(margin = margin(r = 6), \n                                        size = 14, hjust = 0, color = \"gray30\",\n                                        angle = 90),\n            axis.title.x = element_text(margin = margin(t = 8), \n                                        size = 14, hjust = 0, color = \"gray30\"),\n            axis.text.x.top = element_blank(),\n            axis.text.y.right = element_blank(),\n            axis.text.x = element_text(size = 12, color = \"gray30\"), \n            axis.text.y = element_text(size = 12, color = \"gray30\", hjust = 1),\n            axis.line = element_line(color =\"gray30\", linewidth = 0.5),\n            axis.ticks.length.x.top = unit(0, \"cm\"),\n            axis.ticks.length.y.right = unit(0, \"cm\"),\n            axis.ticks.length.y = unit(.15, \"cm\"),\n            axis.ticks.length.x = unit(.15, \"cm\"),\n            panel.grid.major.x = element_line(color = \"gray85\"),\n            panel.grid.major.y = element_line(color = \"gray85\"),\n            panel.grid.minor.y = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.background = element_rect(color = \"white\", fill = 'grey98', linewidth = 0.1),\n            legend.position = \"top\", \n            legend.margin = margin(b = 0),\n            legend.justification = \"right\",\n            legend.title = element_text(size = 14, color = \"gray30\"),\n            legend.text = element_text(size = 13, color = \"gray30\"),\n            strip.text.x = element_text(size = 12),\n            strip.text.y = element_text(size = 12, angle = 270)\n        )\n}\n\n\n\n\n\ng &lt;- ggplot(gdata, aes(ymax=YMAX, ymin=YMIN, xmax=4, xmin=3, fill=SEXO)) +\n    geom_rect(color = 'grey30') +\n    facet_grid(cols = vars(forcats::fct_rev(GRUPO))) +\n    scale_fill_manual(values = c(\"steelblue\",\"hotpink2\"))  +\n    coord_polar(theta = \"y\") + xlim(c(1, 4)) +\n    olito_theme() +\n    geom_text(aes(x = 3.5, y = (YMIN + YMAX) / 2, \n                  label = scales::percent(PCT, accuracy = 1)), \n              color = \"white\", size = 5, fontface = 'bold' ,\n              show.legend = FALSE) +\n    theme(axis.text.x = element_blank(), axis.text.y = element_blank(),\n          axis.ticks = element_blank(), panel.grid.major.x = element_blank(), \n          panel.grid.major.y = element_blank(), panel.border = element_blank(),\n          strip.background = element_blank(), panel.background = element_blank(),\n          axis.line = element_blank(), axis.title.x = element_blank(),\n          axis.title.y = element_blank(), strip.text.x = element_blank() ) +\n    labs(fill = \"Sexo\") +\n    geom_text(x = 0.5, y = 0.5, label = gdata$GRUPO, \n             color = \"grey30\", size = 12, fontface = \"bold\") +\n    geom_text(x = 1.5, y = 0.5, label = gdata$FEM, \n              color = \"grey30\", size = 8, fontface = \"bold\")\n\nggsave(\"donut.png\", plot = g, width = 1500, height = 400, \n       units = \"px\", dpi = 120, scale = 120/96)\n\nY Voila!"
  },
  {
    "objectID": "Donut/donut.plot.html#datos",
    "href": "Donut/donut.plot.html#datos",
    "title": "Donut Chart",
    "section": "",
    "text": "Lo primero será crear un data.table con datos simulados. En este caso son 2 categorías.\n\nSexo que irá en la torta\nGrupo que irá en facets\nN que son recuentos\n\n\nlibrary(data.table)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Partimos con data numerica de cantidades\ngdata &lt;- data.table(\n    SEXO = rep(c(\"Hombre\", \"Mujer\"), 4),\n    GRUPO = rep(c(\"D\", \"C\", \"B\", \"A\"), each = 2),\n    N = c(2220698, 1713396, 1381339, 1274634, 2841801, 3748242, 1292953, 1743318)\n)\n\nprint(gdata, row.names = FALSE)\n\n   SEXO  GRUPO       N\n &lt;char&gt; &lt;char&gt;   &lt;num&gt;\n Hombre      D 2220698\n  Mujer      D 1713396\n Hombre      C 1381339\n  Mujer      C 1274634\n Hombre      B 2841801\n  Mujer      B 3748242\n Hombre      A 1292953\n  Mujer      A 1743318"
  },
  {
    "objectID": "Donut/donut.plot.html#data-management",
    "href": "Donut/donut.plot.html#data-management",
    "title": "Donut Chart",
    "section": "",
    "text": "Ahora necesitamos crear los minimos y máximos de los porcentajes de N respecto de cada GRUPO. La razón es que este gráfico se crea usando rectangulos de un tamaño definido por los porcentajes. Hacemos un pequeño data management.\n\n# Calculamos el porcentaje\ngdata[, PCT := N/sum(N), GRUPO]\n\n# El valor maximo de cada geom_rect\ngdata[, YMAX := cumsum(PCT), GRUPO]\n\n# El valor mínimo\ngdata[, YMIN := shift(YMAX, type = 'lag')]\ngdata[, YMIN := ifelse(YMAX != 1, 0, YMIN)]\n\n# Indice entre Mujer/Hombre\ngdata[, FEM := round(PCT/YMIN, 2)]\ngdata[, FEM := ifelse(FEM == Inf, NA, FEM)]\n\nprint(as.data.frame(gdata), row.names = FALSE)\n\n   SEXO GRUPO       N       PCT      YMAX      YMIN  FEM\n Hombre     D 2220698 0.5644751 0.5644751 0.0000000   NA\n  Mujer     D 1713396 0.4355249 1.0000000 0.5644751 0.77\n Hombre     C 1381339 0.5200877 0.5200877 0.0000000   NA\n  Mujer     C 1274634 0.4799123 1.0000000 0.5200877 0.92\n Hombre     B 2841801 0.4312265 0.4312265 0.0000000   NA\n  Mujer     B 3748242 0.5687735 1.0000000 0.4312265 1.32\n Hombre     A 1292953 0.4258358 0.4258358 0.0000000   NA\n  Mujer     A 1743318 0.5741642 1.0000000 0.4258358 1.35"
  },
  {
    "objectID": "Donut/donut.plot.html#theme",
    "href": "Donut/donut.plot.html#theme",
    "title": "Donut Chart",
    "section": "",
    "text": "Ya con esto el grafico, pero primero el theme que suelo usar. Producto del mismo tuve que pasar muchos elementos a element_blank() .\n\n# Mi tema\nolito_theme &lt;- function(){\n    theme_bw() %+replace%  \n        theme(\n            axis.title.y = element_text(margin = margin(r = 6), \n                                        size = 14, hjust = 0, color = \"gray30\",\n                                        angle = 90),\n            axis.title.x = element_text(margin = margin(t = 8), \n                                        size = 14, hjust = 0, color = \"gray30\"),\n            axis.text.x.top = element_blank(),\n            axis.text.y.right = element_blank(),\n            axis.text.x = element_text(size = 12, color = \"gray30\"), \n            axis.text.y = element_text(size = 12, color = \"gray30\", hjust = 1),\n            axis.line = element_line(color =\"gray30\", linewidth = 0.5),\n            axis.ticks.length.x.top = unit(0, \"cm\"),\n            axis.ticks.length.y.right = unit(0, \"cm\"),\n            axis.ticks.length.y = unit(.15, \"cm\"),\n            axis.ticks.length.x = unit(.15, \"cm\"),\n            panel.grid.major.x = element_line(color = \"gray85\"),\n            panel.grid.major.y = element_line(color = \"gray85\"),\n            panel.grid.minor.y = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.background = element_rect(color = \"white\", fill = 'grey98', linewidth = 0.1),\n            legend.position = \"top\", \n            legend.margin = margin(b = 0),\n            legend.justification = \"right\",\n            legend.title = element_text(size = 14, color = \"gray30\"),\n            legend.text = element_text(size = 13, color = \"gray30\"),\n            strip.text.x = element_text(size = 12),\n            strip.text.y = element_text(size = 12, angle = 270)\n        )\n}"
  },
  {
    "objectID": "Donut/donut.plot.html#grafico",
    "href": "Donut/donut.plot.html#grafico",
    "title": "Donut Chart",
    "section": "",
    "text": "g &lt;- ggplot(gdata, aes(ymax=YMAX, ymin=YMIN, xmax=4, xmin=3, fill=SEXO)) +\n    geom_rect(color = 'grey30') +\n    facet_grid(cols = vars(forcats::fct_rev(GRUPO))) +\n    scale_fill_manual(values = c(\"steelblue\",\"hotpink2\"))  +\n    coord_polar(theta = \"y\") + xlim(c(1, 4)) +\n    olito_theme() +\n    geom_text(aes(x = 3.5, y = (YMIN + YMAX) / 2, \n                  label = scales::percent(PCT, accuracy = 1)), \n              color = \"white\", size = 5, fontface = 'bold' ,\n              show.legend = FALSE) +\n    theme(axis.text.x = element_blank(), axis.text.y = element_blank(),\n          axis.ticks = element_blank(), panel.grid.major.x = element_blank(), \n          panel.grid.major.y = element_blank(), panel.border = element_blank(),\n          strip.background = element_blank(), panel.background = element_blank(),\n          axis.line = element_blank(), axis.title.x = element_blank(),\n          axis.title.y = element_blank(), strip.text.x = element_blank() ) +\n    labs(fill = \"Sexo\") +\n    geom_text(x = 0.5, y = 0.5, label = gdata$GRUPO, \n             color = \"grey30\", size = 12, fontface = \"bold\") +\n    geom_text(x = 1.5, y = 0.5, label = gdata$FEM, \n              color = \"grey30\", size = 8, fontface = \"bold\")\n\nggsave(\"donut.png\", plot = g, width = 1500, height = 400, \n       units = \"px\", dpi = 120, scale = 120/96)\n\nY Voila!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Donut/otra.html",
    "href": "Donut/otra.html",
    "title": "Graficos varios",
    "section": "",
    "text": "Repositorio para acordarme de algunos gráficos y cosas varias\n\n\nPara representar varios grupos, dividido por Sexo en este caso y debajo del identificador de grupos el índice de feminidad.\nCódigo"
  },
  {
    "objectID": "Donut/otra.html#donut-chart",
    "href": "Donut/otra.html#donut-chart",
    "title": "Graficos varios",
    "section": "",
    "text": "Para representar varios grupos, dividido por Sexo en este caso y debajo del identificador de grupos el índice de feminidad.\nCódigo"
  },
  {
    "objectID": "donut.html",
    "href": "donut.html",
    "title": "Donut Chart",
    "section": "",
    "text": "Lo primero será crear un data.table con datos simulados. En este caso son 2 categorías.\n\nSexo que irá en la torta\nGrupo que irá en facets\nN que son recuentos\n\nlibrary(data.table)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Partimos con data numerica de cantidades\ngdata &lt;- data.table(\n    SEXO = rep(c(\"Hombre\", \"Mujer\"), 4),\n    GRUPO = rep(c(\"D\", \"C\", \"B\", \"A\"), each = 2),\n    N = c(2220698, 1713396, 1381339, 1274634, 2841801, 3748242, 1292953, 1743318)\n)\n\nprint(gdata, row.names = FALSE)\n##    SEXO  GRUPO       N\n##  &lt;char&gt; &lt;char&gt;   &lt;num&gt;\n##  Hombre      D 2220698\n##   Mujer      D 1713396\n##  Hombre      C 1381339\n##   Mujer      C 1274634\n##  Hombre      B 2841801\n##   Mujer      B 3748242\n##  Hombre      A 1292953\n##   Mujer      A 1743318\n\n\n\nAhora necesitamos crear los minimos y máximos de los porcentajes de N respecto de cada GRUPO. La razón es que este gráfico se crea usando rectangulos de un tamaño definido por los porcentajes. Hacemos un pequeño data management.\n# Calculamos el porcentaje\ngdata[, PCT := N/sum(N), GRUPO]\n\n# El valor maximo de cada geom_rect\ngdata[, YMAX := cumsum(PCT), GRUPO]\n\n# El valor mínimo\ngdata[, YMIN := shift(YMAX, type = 'lag')]\ngdata[, YMIN := ifelse(YMAX != 1, 0, YMIN)]\n\n# Indice entre Mujer/Hombre\ngdata[, FEM := round(PCT/YMIN, 2)]\ngdata[, FEM := ifelse(FEM == Inf, NA, FEM)]\n\nprint(as.data.frame(gdata), row.names = FALSE)\n##    SEXO GRUPO       N       PCT      YMAX      YMIN  FEM\n##  Hombre     D 2220698 0.5644751 0.5644751 0.0000000   NA\n##   Mujer     D 1713396 0.4355249 1.0000000 0.5644751 0.77\n##  Hombre     C 1381339 0.5200877 0.5200877 0.0000000   NA\n##   Mujer     C 1274634 0.4799123 1.0000000 0.5200877 0.92\n##  Hombre     B 2841801 0.4312265 0.4312265 0.0000000   NA\n##   Mujer     B 3748242 0.5687735 1.0000000 0.4312265 1.32\n##  Hombre     A 1292953 0.4258358 0.4258358 0.0000000   NA\n##   Mujer     A 1743318 0.5741642 1.0000000 0.4258358 1.35\n\n\n\nYa con esto el grafico, pero primero el theme que suelo usar. Producto del mismo tuve que pasar muchos elementos a element_blank() .\n# Mi tema\nolito_theme &lt;- function(){\n    theme_bw() %+replace%  \n        theme(\n            axis.title.y = element_text(margin = margin(r = 6), \n                                        size = 14, hjust = 0, color = \"gray30\",\n                                        angle = 90),\n            axis.title.x = element_text(margin = margin(t = 8), \n                                        size = 14, hjust = 0, color = \"gray30\"),\n            axis.text.x.top = element_blank(),\n            axis.text.y.right = element_blank(),\n            axis.text.x = element_text(size = 12, color = \"gray30\"), \n            axis.text.y = element_text(size = 12, color = \"gray30\", hjust = 1),\n            axis.line = element_line(color =\"gray30\", linewidth = 0.5),\n            axis.ticks.length.x.top = unit(0, \"cm\"),\n            axis.ticks.length.y.right = unit(0, \"cm\"),\n            axis.ticks.length.y = unit(.15, \"cm\"),\n            axis.ticks.length.x = unit(.15, \"cm\"),\n            panel.grid.major.x = element_line(color = \"gray85\"),\n            panel.grid.major.y = element_line(color = \"gray85\"),\n            panel.grid.minor.y = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.background = element_rect(color = \"white\", fill = 'grey98', linewidth = 0.1),\n            legend.position = \"top\", \n            legend.margin = margin(b = 0),\n            legend.justification = \"right\",\n            legend.title = element_text(size = 14, color = \"gray30\"),\n            legend.text = element_text(size = 13, color = \"gray30\"),\n            strip.text.x = element_text(size = 12),\n            strip.text.y = element_text(size = 12, angle = 270)\n        )\n}\n\n\n\ng &lt;- ggplot(gdata, aes(ymax=YMAX, ymin=YMIN, xmax=4, xmin=3, fill=SEXO)) +\n    geom_rect(color = 'grey30') +\n    facet_grid(cols = vars(forcats::fct_rev(GRUPO))) +\n    scale_fill_manual(values = c(\"steelblue\",\"hotpink2\"))  +\n    coord_polar(theta = \"y\") + xlim(c(1, 4)) +\n    olito_theme() +\n    geom_text(aes(x = 3.5, y = (YMIN + YMAX) / 2, \n                  label = scales::percent(PCT, accuracy = 1)), \n              color = \"white\", size = 5, fontface = 'bold' ,\n              show.legend = FALSE) +\n    theme(axis.text.x = element_blank(), axis.text.y = element_blank(),\n          axis.ticks = element_blank(), panel.grid.major.x = element_blank(), \n          panel.grid.major.y = element_blank(), panel.border = element_blank(),\n          strip.background = element_blank(), panel.background = element_blank(),\n          axis.line = element_blank(), axis.title.x = element_blank(),\n          axis.title.y = element_blank(), strip.text.x = element_blank() ) +\n    labs(fill = \"Sexo\") +\n    geom_text(x = 0.5, y = 0.5, label = gdata$GRUPO, \n             color = \"grey30\", size = 12, fontface = \"bold\") +\n    geom_text(x = 1.5, y = 0.5, label = gdata$FEM, \n              color = \"grey30\", size = 8, fontface = \"bold\")\n\nggsave(\"donut.png\", plot = g, width = 1500, height = 400, \n       units = \"px\", dpi = 120, scale = 120/96)\nY Voila!",
    "crumbs": [
      "Donut chart"
    ]
  },
  {
    "objectID": "donut.html#datos",
    "href": "donut.html#datos",
    "title": "Donut Chart",
    "section": "",
    "text": "Lo primero será crear un data.table con datos simulados. En este caso son 2 categorías.\n\nSexo que irá en la torta\nGrupo que irá en facets\nN que son recuentos\n\nlibrary(data.table)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# Partimos con data numerica de cantidades\ngdata &lt;- data.table(\n    SEXO = rep(c(\"Hombre\", \"Mujer\"), 4),\n    GRUPO = rep(c(\"D\", \"C\", \"B\", \"A\"), each = 2),\n    N = c(2220698, 1713396, 1381339, 1274634, 2841801, 3748242, 1292953, 1743318)\n)\n\nprint(gdata, row.names = FALSE)\n##    SEXO  GRUPO       N\n##  &lt;char&gt; &lt;char&gt;   &lt;num&gt;\n##  Hombre      D 2220698\n##   Mujer      D 1713396\n##  Hombre      C 1381339\n##   Mujer      C 1274634\n##  Hombre      B 2841801\n##   Mujer      B 3748242\n##  Hombre      A 1292953\n##   Mujer      A 1743318",
    "crumbs": [
      "Donut chart"
    ]
  },
  {
    "objectID": "donut.html#data-management",
    "href": "donut.html#data-management",
    "title": "Donut Chart",
    "section": "",
    "text": "Ahora necesitamos crear los minimos y máximos de los porcentajes de N respecto de cada GRUPO. La razón es que este gráfico se crea usando rectangulos de un tamaño definido por los porcentajes. Hacemos un pequeño data management.\n# Calculamos el porcentaje\ngdata[, PCT := N/sum(N), GRUPO]\n\n# El valor maximo de cada geom_rect\ngdata[, YMAX := cumsum(PCT), GRUPO]\n\n# El valor mínimo\ngdata[, YMIN := shift(YMAX, type = 'lag')]\ngdata[, YMIN := ifelse(YMAX != 1, 0, YMIN)]\n\n# Indice entre Mujer/Hombre\ngdata[, FEM := round(PCT/YMIN, 2)]\ngdata[, FEM := ifelse(FEM == Inf, NA, FEM)]\n\nprint(as.data.frame(gdata), row.names = FALSE)\n##    SEXO GRUPO       N       PCT      YMAX      YMIN  FEM\n##  Hombre     D 2220698 0.5644751 0.5644751 0.0000000   NA\n##   Mujer     D 1713396 0.4355249 1.0000000 0.5644751 0.77\n##  Hombre     C 1381339 0.5200877 0.5200877 0.0000000   NA\n##   Mujer     C 1274634 0.4799123 1.0000000 0.5200877 0.92\n##  Hombre     B 2841801 0.4312265 0.4312265 0.0000000   NA\n##   Mujer     B 3748242 0.5687735 1.0000000 0.4312265 1.32\n##  Hombre     A 1292953 0.4258358 0.4258358 0.0000000   NA\n##   Mujer     A 1743318 0.5741642 1.0000000 0.4258358 1.35",
    "crumbs": [
      "Donut chart"
    ]
  },
  {
    "objectID": "donut.html#theme",
    "href": "donut.html#theme",
    "title": "Donut Chart",
    "section": "",
    "text": "Ya con esto el grafico, pero primero el theme que suelo usar. Producto del mismo tuve que pasar muchos elementos a element_blank() .\n# Mi tema\nolito_theme &lt;- function(){\n    theme_bw() %+replace%  \n        theme(\n            axis.title.y = element_text(margin = margin(r = 6), \n                                        size = 14, hjust = 0, color = \"gray30\",\n                                        angle = 90),\n            axis.title.x = element_text(margin = margin(t = 8), \n                                        size = 14, hjust = 0, color = \"gray30\"),\n            axis.text.x.top = element_blank(),\n            axis.text.y.right = element_blank(),\n            axis.text.x = element_text(size = 12, color = \"gray30\"), \n            axis.text.y = element_text(size = 12, color = \"gray30\", hjust = 1),\n            axis.line = element_line(color =\"gray30\", linewidth = 0.5),\n            axis.ticks.length.x.top = unit(0, \"cm\"),\n            axis.ticks.length.y.right = unit(0, \"cm\"),\n            axis.ticks.length.y = unit(.15, \"cm\"),\n            axis.ticks.length.x = unit(.15, \"cm\"),\n            panel.grid.major.x = element_line(color = \"gray85\"),\n            panel.grid.major.y = element_line(color = \"gray85\"),\n            panel.grid.minor.y = element_blank(),\n            panel.grid.minor.x = element_blank(),\n            panel.background = element_rect(color = \"white\", fill = 'grey98', linewidth = 0.1),\n            legend.position = \"top\", \n            legend.margin = margin(b = 0),\n            legend.justification = \"right\",\n            legend.title = element_text(size = 14, color = \"gray30\"),\n            legend.text = element_text(size = 13, color = \"gray30\"),\n            strip.text.x = element_text(size = 12),\n            strip.text.y = element_text(size = 12, angle = 270)\n        )\n}",
    "crumbs": [
      "Donut chart"
    ]
  },
  {
    "objectID": "donut.html#grafico",
    "href": "donut.html#grafico",
    "title": "Donut Chart",
    "section": "",
    "text": "g &lt;- ggplot(gdata, aes(ymax=YMAX, ymin=YMIN, xmax=4, xmin=3, fill=SEXO)) +\n    geom_rect(color = 'grey30') +\n    facet_grid(cols = vars(forcats::fct_rev(GRUPO))) +\n    scale_fill_manual(values = c(\"steelblue\",\"hotpink2\"))  +\n    coord_polar(theta = \"y\") + xlim(c(1, 4)) +\n    olito_theme() +\n    geom_text(aes(x = 3.5, y = (YMIN + YMAX) / 2, \n                  label = scales::percent(PCT, accuracy = 1)), \n              color = \"white\", size = 5, fontface = 'bold' ,\n              show.legend = FALSE) +\n    theme(axis.text.x = element_blank(), axis.text.y = element_blank(),\n          axis.ticks = element_blank(), panel.grid.major.x = element_blank(), \n          panel.grid.major.y = element_blank(), panel.border = element_blank(),\n          strip.background = element_blank(), panel.background = element_blank(),\n          axis.line = element_blank(), axis.title.x = element_blank(),\n          axis.title.y = element_blank(), strip.text.x = element_blank() ) +\n    labs(fill = \"Sexo\") +\n    geom_text(x = 0.5, y = 0.5, label = gdata$GRUPO, \n             color = \"grey30\", size = 12, fontface = \"bold\") +\n    geom_text(x = 1.5, y = 0.5, label = gdata$FEM, \n              color = \"grey30\", size = 8, fontface = \"bold\")\n\nggsave(\"donut.png\", plot = g, width = 1500, height = 400, \n       units = \"px\", dpi = 120, scale = 120/96)\nY Voila!",
    "crumbs": [
      "Donut chart"
    ]
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "Olito's plots",
    "section": "",
    "text": "Visita la página\nolitroski.github.io/Graficos/"
  },
  {
    "objectID": "Barras.html",
    "href": "Barras.html",
    "title": "Grafico Barras",
    "section": "",
    "text": "Aquí hay harta variedad, comenzando por lo más simple un grafico de barras con un solo campo categórico.\n\n# Importes\nlibrary(data.table)\nlibrary(ggplot2)\n\n\n\nPrimero los datos\n\ngdata &lt;- data.frame(grupo = c(\"A\", \"B\", \"C\"), valor = c(13, 15, 6), \n                    valmin = c(10, 10, 5), valmax = c(15, 19, 10))\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nAhora lo definicmos con geom_bar, en este caso siempr será postion dodge y stat identity\n\n# La versión más simple\nggplot(gdata, aes(x = grupo, y = valor)) +\n    geom_bar(position = 'dodge', stat = 'identity')\n\n\n\n\n\n\n\n\n\n\nLo vamos a hermosear un poco, le ponemos colores diferentes, le quitamos el expand al eje Y. Para esto (en mi opinión) es usar la vuelta larga, es decir creando un vector que tendrá los valores de color que deseamos. en el fill hacemos referencia a “grupo”\n\nSi vamos a cambiar el fill, este debe estar declarado antes en el aes\n\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    scale_y_continuous(limits = c(0, 16), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\")\n\n\n\n\n\n\n\n\nEl resto ya serían cosas estéticas como poner etiquetas, cambiar el theme, poner titulos etc.\n\n\n\n\nEsta es una solicitud constante, vamos a necesitar los valores minimos o máximos, independiente que sean desviaciones estándar, limites, SEM o lo que sea.\n\n# Miremos los datos\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nLa tabla ya tiene minimos y máximos, usemos y creamos las barras de error. Continuamos desde el código del gráfico anterior.\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    \n    # Colores\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    \n    # Barras de error\n    geom_errorbar(aes(ymin = valmin, ymax = valmax), \n                  width = 0.2,\n                  size = 1,\n                  color = \"grey30\") +\n    \n    # Eje y etiquetas\n    scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\") +\n    theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Barras.html#barras-simple",
    "href": "Barras.html#barras-simple",
    "title": "Grafico Barras",
    "section": "",
    "text": "Primero los datos\n\ngdata &lt;- data.frame(grupo = c(\"A\", \"B\", \"C\"), valor = c(13, 15, 6), \n                    valmin = c(10, 10, 5), valmax = c(15, 19, 10))\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nAhora lo definicmos con geom_bar, en este caso siempr será postion dodge y stat identity\n\n# La versión más simple\nggplot(gdata, aes(x = grupo, y = valor)) +\n    geom_bar(position = 'dodge', stat = 'identity')\n\n\n\n\n\n\n\n\n\n\nLo vamos a hermosear un poco, le ponemos colores diferentes, le quitamos el expand al eje Y. Para esto (en mi opinión) es usar la vuelta larga, es decir creando un vector que tendrá los valores de color que deseamos. en el fill hacemos referencia a “grupo”\n\nSi vamos a cambiar el fill, este debe estar declarado antes en el aes\n\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    scale_y_continuous(limits = c(0, 16), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\")\n\n\n\n\n\n\n\n\nEl resto ya serían cosas estéticas como poner etiquetas, cambiar el theme, poner titulos etc."
  },
  {
    "objectID": "Barras.html#barras-de-error",
    "href": "Barras.html#barras-de-error",
    "title": "Grafico Barras",
    "section": "",
    "text": "Esta es una solicitud constante, vamos a necesitar los valores minimos o máximos, independiente que sean desviaciones estándar, limites, SEM o lo que sea.\n\n# Miremos los datos\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nLa tabla ya tiene minimos y máximos, usemos y creamos las barras de error. Continuamos desde el código del gráfico anterior.\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    \n    # Colores\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    \n    # Barras de error\n    geom_errorbar(aes(ymin = valmin, ymax = valmax), \n                  width = 0.2,\n                  size = 1,\n                  color = \"grey30\") +\n    \n    # Eje y etiquetas\n    scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\") +\n    theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "docs/barras.html",
    "href": "docs/barras.html",
    "title": "Grafico Barras",
    "section": "",
    "text": "Aquí hay harta variedad, comenzando por lo más simple un grafico de barras con un solo campo categórico.\n\n# Importes\nlibrary(data.table)\nlibrary(ggplot2)\n\n\n\nPrimero los datos\n\ngdata &lt;- data.frame(grupo = c(\"A\", \"B\", \"C\"), valor = c(13, 15, 6), \n                    valmin = c(10, 10, 5), valmax = c(15, 19, 10))\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nAhora lo definicmos con geom_bar, en este caso siempr será postion dodge y stat identity\n\n# La versión más simple\nggplot(gdata, aes(x = grupo, y = valor)) +\n    geom_bar(position = 'dodge', stat = 'identity')\n\n\n\n\n\n\n\n\n\n\nLo vamos a hermosear un poco, le ponemos colores diferentes, le quitamos el expand al eje Y. Para esto (en mi opinión) es usar la vuelta larga, es decir creando un vector que tendrá los valores de color que deseamos. en el fill hacemos referencia a “grupo”\n\nSi vamos a cambiar el fill, este debe estar declarado antes en el aes\n\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    scale_y_continuous(limits = c(0, 16), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\")\n\n\n\n\n\n\n\n\nEl resto ya serían cosas estéticas como poner etiquetas, cambiar el theme, poner titulos etc.\n\n\n\n\nEsta es una solicitud constante, vamos a necesitar los valores minimos o máximos, independiente que sean desviaciones estándar, limites, SEM o lo que sea.\n\n# Miremos los datos\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nLa tabla ya tiene minimos y máximos, usemos y creamos las barras de error. Continuamos desde el código del gráfico anterior.\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    \n    # Colores\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    \n    # Barras de error\n    geom_errorbar(aes(ymin = valmin, ymax = valmax), \n                  width = 0.2,\n                  size = 1,\n                  color = \"grey30\") +\n    \n    # Eje y etiquetas\n    scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\") +\n    theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "docs/barras.html#barras-simple",
    "href": "docs/barras.html#barras-simple",
    "title": "Grafico Barras",
    "section": "",
    "text": "Primero los datos\n\ngdata &lt;- data.frame(grupo = c(\"A\", \"B\", \"C\"), valor = c(13, 15, 6), \n                    valmin = c(10, 10, 5), valmax = c(15, 19, 10))\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nAhora lo definicmos con geom_bar, en este caso siempr será postion dodge y stat identity\n\n# La versión más simple\nggplot(gdata, aes(x = grupo, y = valor)) +\n    geom_bar(position = 'dodge', stat = 'identity')\n\n\n\n\n\n\n\n\n\n\nLo vamos a hermosear un poco, le ponemos colores diferentes, le quitamos el expand al eje Y. Para esto (en mi opinión) es usar la vuelta larga, es decir creando un vector que tendrá los valores de color que deseamos. en el fill hacemos referencia a “grupo”\n\nSi vamos a cambiar el fill, este debe estar declarado antes en el aes\n\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    scale_y_continuous(limits = c(0, 16), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\")\n\n\n\n\n\n\n\n\nEl resto ya serían cosas estéticas como poner etiquetas, cambiar el theme, poner titulos etc."
  },
  {
    "objectID": "docs/barras.html#barras-de-error",
    "href": "docs/barras.html#barras-de-error",
    "title": "Grafico Barras",
    "section": "",
    "text": "Esta es una solicitud constante, vamos a necesitar los valores minimos o máximos, independiente que sean desviaciones estándar, limites, SEM o lo que sea.\n\n# Miremos los datos\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nLa tabla ya tiene minimos y máximos, usemos y creamos las barras de error. Continuamos desde el código del gráfico anterior.\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    \n    # Colores\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    \n    # Barras de error\n    geom_errorbar(aes(ymin = valmin, ymax = valmax), \n                  width = 0.2,\n                  size = 1,\n                  color = \"grey30\") +\n    \n    # Eje y etiquetas\n    scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\") +\n    theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "barras.html",
    "href": "barras.html",
    "title": "Grafico Barras",
    "section": "",
    "text": "Aquí hay harta variedad, comenzando por lo más simple un grafico de barras con un solo campo categórico.\n\n# Importes\nlibrary(data.table)\nlibrary(ggplot2)\n\n\n\nPrimero los datos\n\ngdata &lt;- data.frame(grupo = c(\"A\", \"B\", \"C\"), valor = c(13, 15, 6), \n                    valmin = c(10, 10, 5), valmax = c(15, 19, 10))\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nAhora lo definicmos con geom_bar, en este caso siempr será postion dodge y stat identity\n\n# La versión más simple\nggplot(gdata, aes(x = grupo, y = valor)) +\n    geom_bar(position = 'dodge', stat = 'identity')\n\n\n\n\n\n\n\n\n\n\nLo vamos a hermosear un poco, le ponemos colores diferentes, le quitamos el expand al eje Y. Para esto (en mi opinión) es usar la vuelta larga, es decir creando un vector que tendrá los valores de color que deseamos. en el fill hacemos referencia a “grupo”\n\nSi vamos a cambiar el fill, este debe estar declarado antes en el aes\n\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    scale_y_continuous(limits = c(0, 16), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\")\n\n\n\n\n\n\n\n\nEl resto ya serían cosas estéticas como poner etiquetas, cambiar el theme, poner titulos etc.\n\n\n\n\nEsta es una solicitud constante, vamos a necesitar los valores minimos o máximos, independiente que sean desviaciones estándar, limites, SEM o lo que sea.\n\n# Miremos los datos\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nLa tabla ya tiene minimos y máximos, usemos y creamos las barras de error. Continuamos desde el código del gráfico anterior.\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    \n    # Colores\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    \n    # Barras de error\n    geom_errorbar(aes(ymin = valmin, ymax = valmax), \n                  width = 0.2,\n                  size = 1,\n                  color = \"grey30\") +\n    \n    # Eje y etiquetas\n    scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\") +\n    theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "barras.html#barras-simple",
    "href": "barras.html#barras-simple",
    "title": "Grafico Barras",
    "section": "",
    "text": "Primero los datos\n\ngdata &lt;- data.frame(grupo = c(\"A\", \"B\", \"C\"), valor = c(13, 15, 6), \n                    valmin = c(10, 10, 5), valmax = c(15, 19, 10))\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nAhora lo definicmos con geom_bar, en este caso siempr será postion dodge y stat identity\n\n# La versión más simple\nggplot(gdata, aes(x = grupo, y = valor)) +\n    geom_bar(position = 'dodge', stat = 'identity')\n\n\n\n\n\n\n\n\n\n\nLo vamos a hermosear un poco, le ponemos colores diferentes, le quitamos el expand al eje Y. Para esto (en mi opinión) es usar la vuelta larga, es decir creando un vector que tendrá los valores de color que deseamos. en el fill hacemos referencia a “grupo”\n\nSi vamos a cambiar el fill, este debe estar declarado antes en el aes\n\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    scale_y_continuous(limits = c(0, 16), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\")\n\n\n\n\n\n\n\n\nEl resto ya serían cosas estéticas como poner etiquetas, cambiar el theme, poner titulos etc."
  },
  {
    "objectID": "barras.html#barras-de-error",
    "href": "barras.html#barras-de-error",
    "title": "Grafico Barras",
    "section": "",
    "text": "Esta es una solicitud constante, vamos a necesitar los valores minimos o máximos, independiente que sean desviaciones estándar, limites, SEM o lo que sea.\n\n# Miremos los datos\nprint(gdata)\n\n  grupo valor valmin valmax\n1     A    13     10     15\n2     B    15     10     19\n3     C     6      5     10\n\n\nLa tabla ya tiene minimos y máximos, usemos y creamos las barras de error. Continuamos desde el código del gráfico anterior.\n\n# Vector de colores\nvector_colores &lt;- c(\"A\" = \"steelblue\",\n                    \"B\" = \"hotpink2\", \n                    \"C\" = \"aquamarine4\")\nprint(vector_colores)\n\n            A             B             C \n  \"steelblue\"    \"hotpink2\" \"aquamarine4\" \n\n# Hermoseado\nggplot(gdata, aes(x = grupo, y = valor, fill = grupo)) +\n    geom_bar(position = 'dodge', stat = 'identity', color = 'grey30') +\n    \n    # Colores\n    scale_fill_manual(\"Colores\", \n                      values = vector_colores, \n                      labels = c(\"Steelblue\", \"Hotpink2\", \"Aquamarine4\")) +\n    \n    # Barras de error\n    geom_errorbar(aes(ymin = valmin, ymax = valmax), \n                  width = 0.2,\n                  size = 1,\n                  color = \"grey30\") +\n    \n    # Eje y etiquetas\n    scale_y_continuous(limits = c(0, 20), expand = c(0, 0)) + \n    labs(x = \"Grupo\", y = \"Valores\") +\n    theme_bw()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "index.html#donut-chart",
    "href": "index.html#donut-chart",
    "title": "Cosas de graficos",
    "section": "",
    "text": "En todas sus variantes",
    "crumbs": [
      "Inicio"
    ]
  }
]